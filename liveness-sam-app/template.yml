AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Amazon Cognito User Pool with Passwordless Facial Recognition Auth configured

Metadata:
  AWS::ServerlessRepo::Application:
    Name: amazon-cognito-liveness-detection-auth
    Description: >
      An Amazon Cognito user pool, pre-configured with AWS Lambda triggers to implement liveness detection using Amazon Rekognition and local image processing
    Author: Rodrigo Alarcon, Joao Aragao
    SpdxLicenseId: MIT-0
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['cognito', 'passwordless', 'authentication', 'rekognition', 'facial', 'recognition', 'auth', 'liveness', sample']
    HomepageUrl: https://github.com/aws-samples/amazon-cognito-facial-recognition-auth/tree/master/
    SemanticVersion: 1.0.1
    SourceCodeUrl: https://github.com/aws-samples/amazon-cognito-facial-recognition-auth/tree/master/

Parameters:
  UserPoolName:
    Type: String
    Description: The name you want the Amazon Cognito User Pool to be created with
    Default: LivenessDetectionUserPool
  CollectionName:
    Type: String
    Description: The custom Amazon Rekognition collection to index user faces
    Default: LivenessDetectionCollection

Globals:
  Function:
    Environment:
      Variables:
        rekognitionCollection: !Ref CollectionName

  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'" 
      AllowOrigin: "'*'"
    Auth:
      AddDefaultAuthorizerToCorsPreflight: False
      # DefaultAuthorizer: CognitoAuthorizer
      # Authorizers:
      #   CognitoAuthorizer:
      #     UserPoolArn: !Ref UserPoolName

Resources:
  WebApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - WebApi
    Properties:
      Name: LivenessDetectionApiKey
      Description: API Key to be used by Liveness Detection App
      Enabled: true
      StageKeys:
        - RestApiId: !Ref WebApi
          StageName: !Ref WebApi.Stage

  UsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref WebApi
          Stage: !Ref WebApi.Stage
      Description: Usage Plan for Liveness Detection
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: LivenessDetectionUsagePlan

  UsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  IndexFaces:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rekognition/index-faces/
      Handler: index-faces.lambda_handler
      Runtime: python3.6
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - rekognition:IndexFaces
              Resource: "*"
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
              Resource: "arn:aws:logs:*:*:*"
      Events:
        WebApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref WebApi
            Path: /index-faces
            Method: post
            Auth:
              ApiKeyRequired: true # sets for all methods

  SearchFaces:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rekognition/search-faces/
      Handler: search-faces.lambda_handler
      Runtime: python3.6
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - rekognition:DetectFaces
                - rekognition:SearchFacesByImage
              Resource: "*"
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
              Resource: "arn:aws:logs:*:*:*"
      Events:
        WebApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref WebApi
            Path: /search-faces
            Method: post
            Auth:
              ApiKeyRequired: true # sets for all methods

  CreateRekognitionCollectionLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rekognition/create-collection/
      Handler: create-collection.handler
      Runtime: python3.6
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - rekognition:CreateCollection
                - rekognition:DeleteCollection
              Resource: "*"
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
              Resource: "arn:aws:logs:*:*:*"

  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito-triggers/define-auth-challenge/
      Handler: define-auth-challenge.handler
      Runtime: nodejs10.x
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
              Resource: "arn:aws:logs:*:*:*"

  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito-triggers/create-auth-challenge/
      Handler: create-auth-challenge.handler
      Runtime: nodejs8.10
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
              Resource: "arn:aws:logs:*:*:*"

  VerifyAuthChallengeResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito-triggers/verify-auth-challenge-response/
      Handler: verify-auth-challenge-response.lambda_handler
      Runtime: python3.6
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - rekognition:SearchFacesByImage
              Resource: "*"
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
              Resource: "arn:aws:logs:*:*:*"

  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito-triggers/pre-sign-up/
      Handler: pre-sign-up.handler
      Runtime: nodejs10.x
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
              Resource: "arn:aws:logs:*:*:*"

  LambdaInvocationPermission1:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUp.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  LambdaInvocationPermission2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefineAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  LambdaInvocationPermission3:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  LambdaInvocationPermission4:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VerifyAuthChallengeResponse.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  
  RekognitionCollection:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt 'CreateRekognitionCollectionLambda.Arn'

  # CollectionTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties: 
  #     AttributeDefinitions: 
  #       - AttributeName: RekognitionId
  #         AttributeType: S
  #       - AttributeName: FullName
  #         AttributeType: S
  #     KeySchema: 
  #       - AttributeName: RekognitionId
  #         KeyType: HASH
  #       - AttributeName: FullName
  #         KeyType: RANGE
  #     GlobalSecondaryIndexes: 
  #       - 
  #         IndexName: FullName-index
  #         KeySchema: 
  #           - AttributeName: FullName
  #             KeyType: HASH
  #         Projection: 
  #           ProjectionType: ALL
  #         ProvisionedThroughput: 
  #           ReadCapacityUnits: 5
  #           WriteCapacityUnits: 5
  #     ProvisionedThroughput: 
  #       ReadCapacityUnits: 5
  #       WriteCapacityUnits: 5
  #     TableName: !Ref CollectionName

  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Ref UserPoolName
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: faceId
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
        - email
      MfaConfiguration: "OFF"
      LambdaConfig:
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        PreSignUp: !GetAtt PreSignUp.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponse.Arn

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: rekognition-auth-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - CUSTOM_AUTH_FLOW_ONLY

Outputs:
  RekognitionCollectionArn:
    Description: The Amazon Rekognition Custom Collection ARN.
    Value: !GetAtt 'RekognitionCollection.Message'
  UserPoolId:
    Value: !Ref 'UserPool'
    Description: ID of the Cognito User Pool
  UserPoolWebClientId:
    Value: !Ref 'UserPoolClient'
    Description: ID of the Cognito User Pool Client for Front-End Subscription
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Rekognition functions"
    Value: !Sub "https://${WebApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  ApiKeyForLivenessDetection:
    Value: !Ref ApiKey
    Description: Api Key to access Api Endpoints from Web Application